--- a/llvm/include/llvm/Analysis/TargetLibraryInfo.h
+++ b/llvm/include/llvm/Analysis/TargetLibraryInfo.h
@@ -17,6 +17,17 @@
 #include "llvm/TargetParser/Triple.h"
 #include <optional>
 
+#ifndef __GLIBC__
+#undef fopen64
+#undef fseeko64
+#undef fstat64
+#undef fstatvfs64
+#undef ftello64
+#undef lstat64
+#undef stat64
+#undef tmpfile64
+#endif
+
 namespace llvm {
 
 template <typename T> class ArrayRef;
--- a/llvm/lib/Support/Unix/DynamicLibrary.inc
+++ b/llvm/lib/Support/Unix/DynamicLibrary.inc
@@ -104,7 +104,7 @@ static void *DoSearch(const char *Symbol
 // This macro returns the address of a well-known, explicit symbol
 #define EXPLICIT_SYMBOL(SYM)                                                   \
   if (!strcmp(SymbolName, #SYM))                                               \
-  return &SYM
+  return (void *)&SYM
 
 // Under glibc we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
