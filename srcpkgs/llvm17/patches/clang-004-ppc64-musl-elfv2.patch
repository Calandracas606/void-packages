--- a/clang/lib/Basic/Targets/PPC.h
+++ b/clang/lib/Basic/Targets/PPC.h
@@ -424,18 +424,16 @@ public:
       LongDoubleFormat = &llvm::APFloat::IEEEdouble();
     } else if ((Triple.getArch() == llvm::Triple::ppc64le)) {
       DataLayout = "e-m:e-Fn32-i64:64-n32:64";
-      ABI = "elfv2";
     } else {
       DataLayout = "E-m:e";
       if (Triple.isPPC64ELFv2ABI()) {
-        ABI = "elfv2";
         DataLayout += "-Fn32";
       } else {
-        ABI = "elfv1";
         DataLayout += "-Fi64";
       }
       DataLayout += "-i64:64-n32:64";
     }
+    ABI = "elfv2";
 
     if (Triple.isOSFreeBSD() || Triple.isOSOpenBSD() || Triple.isMusl()) {
       LongDoubleWidth = LongDoubleAlign = 64;
--- a/clang/lib/Driver/ToolChains/Clang.cpp
+++ b/clang/lib/Driver/ToolChains/Clang.cpp
@@ -2029,13 +2029,7 @@ void Clang::AddPPCTargetArgs(const ArgLi
   const char *ABIName = nullptr;
   if (T.isOSBinFormatELF()) {
     switch (getToolChain().getArch()) {
-    case llvm::Triple::ppc64: {
-      if (T.isPPC64ELFv2ABI())
-        ABIName = "elfv2";
-      else
-        ABIName = "elfv1";
-      break;
-    }
+    case llvm::Triple::ppc64:
     case llvm::Triple::ppc64le:
       ABIName = "elfv2";
       break;
--- a/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/clang/lib/CodeGen/CodeGenModule.cpp
@@ -194,9 +194,9 @@ createTargetCodeGenInfo(CodeGenModule &C
       return createAIXTargetCodeGenInfo(CGM, /*Is64Bit=*/true);
 
     if (Triple.isOSBinFormatELF()) {
-      PPC64_SVR4_ABIKind Kind = PPC64_SVR4_ABIKind::ELFv1;
-      if (Target.getABI() == "elfv2")
-        Kind = PPC64_SVR4_ABIKind::ELFv2;
+      PPC64_SVR4_ABIKind Kind = PPC64_SVR4_ABIKind::ELFv2;
+      if (Target.getABI() == "elfv1")
+        Kind = PPC64_SVR4_ABIKind::ELFv1;
       bool IsSoftFloat = CodeGenOpts.FloatABI == "soft";
 
       return createPPC64_SVR4_TargetCodeGenInfo(CGM, Kind, IsSoftFloat);
