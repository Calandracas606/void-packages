--- a/clang/tools/scan-build/libexec/ccc-analyzer
+++ b/clang/tools/scan-build/libexec/ccc-analyzer
@@ -93,7 +93,7 @@ if ($FindBin::Script =~ /c\+\+-analyzer/
   if (!defined $Compiler || (! -x $Compiler && ! SearchInPath($Compiler))) { $Compiler = $DefaultCXXCompiler; }
 
   $Clang = $ENV{'CLANG_CXX'};
-  if (!defined $Clang || ! -x $Clang) { $Clang = 'clang++'; }
+  if (!defined $Clang || ! -x $Clang) { $Clang = 'clang++-15'; }
 
   $IsCXX = 1
 }
@@ -102,7 +102,7 @@ else {
   if (!defined $Compiler || (! -x $Compiler && ! SearchInPath($Compiler))) { $Compiler = $DefaultCCompiler; }
 
   $Clang = $ENV{'CLANG'};
-  if (!defined $Clang || ! -x $Clang) { $Clang = 'clang'; }
+  if (!defined $Clang || ! -x $Clang) { $Clang = 'clang-15'; }
 
   $IsCXX = 0
 }
--- a/clang/tools/scan-build/bin/scan-build
+++ b/clang/tools/scan-build/bin/scan-build
@@ -1486,7 +1486,7 @@ sub FindClang {
   if (!defined $Options{AnalyzerDiscoveryMethod}) {
     $Clang = Cwd::realpath("$RealBin/bin/clang") if (-f "$RealBin/bin/clang");
     if (!defined $Clang || ! -x $Clang) {
-      $Clang = Cwd::realpath("$RealBin/clang") if (-f "$RealBin/clang");
+      $Clang = Cwd::realpath("/usr/lib/llvm15/bin/clang");
       if (!defined $Clang || ! -x $Clang) {
         # When an Xcode toolchain is present, look for a clang in the sibling bin
         # of the parent of the bin directory. So if scan-build is at
--- a/clang-tools-extra/clang-tidy/tool/clang-tidy-diff.py
+++ b/clang-tools-extra/clang-tidy/tool/clang-tidy-diff.py
@@ -121,7 +121,7 @@ def main():
                                    'output diagnostics only for modified '
                                    'lines.')
   parser.add_argument('-clang-tidy-binary', metavar='PATH',
-                      default='clang-tidy',
+                      default='clang-tidy-15',
                       help='path to clang-tidy binary')
   parser.add_argument('-p', metavar='NUM', default=0,
                       help='strip the smallest prefix containing P slashes')
--- a/clang/tools/clang-format/git-clang-format
+++ b/clang/tools/clang-format/git-clang-format
@@ -104,7 +104,7 @@ def main():
     usage=usage, formatter_class=argparse.RawDescriptionHelpFormatter,
     description=desc)
   p.add_argument('--binary',
-                 default=config.get('clangformat.binary', 'clang-format'),
+                 default=config.get('clangformat.binary', 'clang-format-15'),
                  help='path to clang-format'),
   p.add_argument('--commit',
                  default=config.get('clangformat.commit', 'HEAD'),
--- a/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
+++ b/clang/tools/scan-build-py/lib/libscanbuild/arguments.py
@@ -266,7 +266,7 @@ def create_analyze_parser(from_build_com
         '--use-analyzer',
         metavar='<path>',
         dest='clang',
-        default='clang',
+        default='clang-15',
         help="""'%(prog)s' uses the 'clang' executable relative to itself for
         static analysis. One can override this behavior with this option by
         using the 'clang' packaged with Xcode (on OS X) or from the PATH.""")
@@ -413,7 +413,7 @@ def create_analyze_parser(from_build_com
             '--use-extdef-map-cmd',
             metavar='<path>',
             dest='extdef_map_cmd',
-            default='clang-extdef-mapping',
+            default='clang-extdef-mapping-15',
             help="""'%(prog)s' uses the 'clang-extdef-mapping' executable
             relative to itself for generating external definition maps for
             static analysis. One can override this behavior with this option
--- a/llvm/tools/llvm-shlib/gen-msvc-exports.py
+++ b/llvm/tools/llvm-shlib/gen-msvc-exports.py
@@ -94,7 +94,7 @@ def main():
         action='store_true'
     )
     parser.add_argument(
-        '--nm', help='path to the llvm-nm executable', default='llvm-nm'
+        '--nm', help='path to the llvm-nm executable', default='llvm-nm-15'
     )
     parser.add_argument(
         'libs', metavar='LIBS', nargs='*', help='list of libraries to generate export from'
--- a/clang/tools/clang-format/clang-format-diff.py
+++ b/clang/tools/clang-format/clang-format-diff.py
@@ -63,7 +63,7 @@ def main():
                       'fallback in case clang-format is invoked with'
                       '-style=file, but can not find the .clang-format'
                       'file to use.')
-  parser.add_argument('-binary', default='clang-format',
+  parser.add_argument('-binary', default='clang-format-15',
                       help='location of binary to use for clang-format')
   args = parser.parse_args()
 
--- a/clang/tools/clang-format/clang-format.el
+++ b/clang/tools/clang-format/clang-format.el
@@ -37,7 +37,7 @@
   :group 'tools)
 
 (defcustom clang-format-executable
-  (or (executable-find "clang-format")
+  (or (executable-find "clang-format-15")
       "clang-format")
   "Location of the clang-format executable.
 
--- a/clang/tools/clang-format/clang-format.py
+++ b/clang/tools/clang-format/clang-format.py
@@ -48,7 +48,7 @@ import vim
 
 # set g:clang_format_path to the path to clang-format if it is not on the path
 # Change this to the full path if clang-format is not on the path.
-binary = 'clang-format'
+binary = 'clang-format-15'
 if vim.eval('exists("g:clang_format_path")') == "1":
   binary = vim.eval('g:clang_format_path')
 
--- a/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py
+++ b/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py
@@ -226,8 +226,10 @@ def main():
                       action='store_true', help='allow alpha checkers from '
                                                 'clang-analyzer.')
   parser.add_argument('-clang-tidy-binary', metavar='PATH',
+                      default='clang-tidy-15',
                       help='path to clang-tidy binary')
   parser.add_argument('-clang-apply-replacements-binary', metavar='PATH',
+                      default='clang-apply-replacements-15',
                       help='path to clang-apply-replacements binary')
   parser.add_argument('-checks', default=None,
                       help='checks filter, when not specified, use clang-tidy '
--- a/clang/bindings/python/clang/cindex.py
+++ b/clang/bindings/python/clang/cindex.py
@@ -4162,7 +4162,7 @@ class Config(object):
         elif name == 'Windows':
             file = 'libclang.dll'
         else:
-            file = 'libclang.so'
+            file = 'libclang-15.so'
 
         if Config.library_path:
             file = Config.library_path + '/' + file
